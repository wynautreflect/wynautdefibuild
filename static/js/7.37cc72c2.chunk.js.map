{"version":3,"sources":["utils/erc20.ts","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","text","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","external","Flex","CardHeading","Tag","farmImage","multiplier","isCommunityFarm","tokenSymbol","alignItems","mb","flexDirection","src","alt","width","height","StyledTokenInput","input","isWarning","shadows","warning","inset","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","size","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","variant","fullWidth","disabled","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","console","log","JSON","stringify","toFormat","onApprove","useApprove","handleApprove","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","ethPrice","showExpandableSection","setShowExpandableSection","communityFarms","includes","split","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","rewardMultiplier","slice","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","FarmTabButtons","stackedOnly","setStackedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","textSubtle","Farms","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWallet","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","stackedOnlyFarms","userData","farmsList","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","map","tokenAmount","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","cakeApy","dualApy","rewardPerBlock","plus","Page","className","exact"],"mappings":"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","file":"static/js/7.37cc72c2.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  return (\r\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? 'Hide' : 'Details'}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text>{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"center\" alignItems=\"center\" mb=\"12px\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        {/* <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex> */}\r\n      </Flex>\r\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={128} height={128} />\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(999, 'Balance')}: {displayBalance.toLocaleString()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\r\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(999, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(999, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          fullWidth\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport { useModal } from '../../../../ui-kit/widgets/Modal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      <Button\r\n        disabled={rawEarningsBalance === 0 || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Pay Day')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  console.log(`account: ${JSON.stringify(account)}`)\r\n  console.log(`allowance: ${allowance.toFormat()}`)\r\n  console.log(`isApproved: ${isApproved}`)\r\n\r\n  const lpContract = useMemo(() => {\r\n    return getContract(ethereum as provider, lpAddress)\r\n  }, [ethereum, lpAddress])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\r\n          MEOWTH\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {TranslateString(999, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const farmApy = apy.times(new BigNumber(10000)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'MEOWTH per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton } from '@pancakeswap-libs/uikit'\r\nimport { useModal } from '../../../../ui-kit/widgets/Modal'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(8px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n  opacity: 0.5\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 16px;\r\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.2), 0px 4px 4px rgba(25, 19, 38, 0.1);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'MEOWTH'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).times(farm.rewardMultiplier).toNumber().toLocaleString('en-US').slice(0, -1)\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {/* {(farm.tokenSymbol === 'WYNAUT' || farm.tokenSymbol === 'MEOWTH') && <StyledCardAccent />} */}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(352, 'APR')}:</Text>\r\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text bold>{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <Divider />\r\n      <ExpandableSectionButton\r\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n        expanded={showExpandableSection}\r\n      />\r\n      <ExpandingWrapper expanded={showExpandableSection}>\r\n        <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </ExpandingWrapper>\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stackedOnly, setStackedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} />\r\n        <Text> {TranslateString(999, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport default styled.div`\r\n  background-color: ${({ theme }) => theme.colors.textSubtle};\r\n  height: 1px;\r\n  margin: 0 auto 32px;\r\n  width: 100%;\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stackedOnly, setStackedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\r\n  const stackedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [farmsLP, bnbPrice, cakePrice, ethereum, account],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <div className=\"Hero\">\r\n            <img src=\"/images/wynaut.svg\" alt=\"Wynaut\" className=\"center\" />\r\n            <img src=\"/images/meowth.svg\" alt=\"Meowth\" className=\"center\" />\r\n            <br/>\r\n      </div>\r\n      <FarmTabButtons stackedOnly={stackedOnly} setStackedOnly={setStackedOnly} />\r\n      <div>\r\n        <Divider />\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stackedOnly ? farmsList(stackedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n      {/* <Image src=\"/images/cakecat.png\" alt=\"Pancake illustration\" width={949} height={384} responsive /> */}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}