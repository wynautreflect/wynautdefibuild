{"version":3,"sources":["hooks/useTickets.ts","hooks/useGetLotteryHasDrawn.ts","hooks/useTokenBalance.ts","utils/erc20.ts","utils/lotteryUtils.js","hooks/useBuyLottery.ts","hooks/useAllowance.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx"],"names":["useTotalRewards","useState","BigNumber","rewards","setRewards","lotteryContract","useLottery","fastRefresh","useRefresh","useEffect","a","getTotalRewards","res","fetchBalance","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","account","useWallet","ticketsContract","useLotteryTicket","useCallback","getTotalClaim","claim","useWinningNumbers","winngNumbers","setWinningNumbers","getWinningNumbers","useMatchingRewardLength","numbers","matchingNumbers","setMatchingNumbers","getMatchingRewardLength","matchedNumbaers","useTickets","lotteryNumber","tickets","setTickets","getTickets","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","getLotteryStatus","state","fetchLotteryStatus","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","cakeContract","getContract","cakeABI","getMeowthAddress","methods","call","supply","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","ethereum","getTokenBalance","useTokenBalance","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","allowance","options","userAddress","contract","balanceOf","multiCall","abi","calls","web3","getWeb3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","console","error","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","finanltokenIds","r","drawed","calls4","reduce","p","c","sum","getMax","maxNumber","getLotteryIssueIndex","matchNumber","historyAmount","amount","LOTTERY_TICKET_PRICE","parseInt","historyNumbers","winningNumbers","useMultiClaimLottery","lotteryTicketContract","onMultiClaim","txHash","useMultiBuyLottery","onMultiBuy","useMaxNumber","max","setMax","fetchMax","useLotteryAllowance","setAllowance","useCake","fetchAllowance","refreshInterval","setInterval","clearInterval","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","TicketsList","styled","div","props","theme","colors","primary","WarningModal","onDismiss","TranslateString","useI18n","title","fullWidth","onClick","StyledTokenInput","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","symbol","availableSymbol","onChange","onSelectMax","value","Input","endAdornment","size","placeholder","toLocaleString","Tips","BuyTicketModal","val","setVal","pendingTx","setPendingTx","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","handleBuy","Math","floor","random","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","e","currentTarget","num","Announce","Final","ModalActions","variant","disabled"],"mappings":"iWAkCaA,EAAkB,WAAO,IAAD,EACLC,mBAAS,IAAIC,IAAU,IADlB,mBAC5BC,EAD4B,KACnBC,EADmB,KAE7BC,EAAkBC,cAChBC,EAAgBC,cAAhBD,YAaR,OAXAE,qBAAU,WAMJJ,GALc,uCAAG,4BAAAK,EAAA,sEACDC,YAAgBN,GADf,OACbO,EADa,OAEnBR,EAAW,IAAIF,IAAUU,IAFN,2CAAH,oDAMhBC,KAED,CAACR,EAAiBE,IAEdJ,GAGIW,EAAgB,WAAO,IAAD,EACKb,mBAAS,IAAIC,IAAU,IAD5B,mBAC1Ba,EAD0B,KACbC,EADa,OAEOf,oBAAS,GAFhB,mBAE1BgB,EAF0B,KAEZC,EAFY,KAGzBC,EAAYC,cAAZD,QACFE,EAAkBC,cAClBjB,EAAkBC,cAElBO,EAAeU,sBAAW,sBAAC,4BAAAb,EAAA,6DAC/BQ,GAAgB,GADe,SAEXM,YAAcnB,EAAiBgB,EAAiBF,GAFrC,OAEzBM,EAFyB,OAG/BT,EAAeS,GACfP,GAAgB,GAJe,2CAK9B,CAACC,EAASd,EAAiBgB,IAQ9B,OANAZ,qBAAU,WACJU,GAAWd,GAAmBgB,GAChCR,MAED,CAACM,EAASN,EAAcR,EAAiBgB,IAErC,CAAEJ,eAAcF,gBAGZW,EAAoB,WAAO,IAAD,EACKzB,mBAAS,CAAC,EAAG,EAAG,EAAG,IADxB,mBAC9B0B,EAD8B,KAChBC,EADgB,KAE/BvB,EAAkBC,cAChBC,EAAgBC,cAAhBD,YAaR,OAXAE,qBAAU,WAMJJ,GALc,uCAAG,4BAAAK,EAAA,sEACGmB,YAAkBxB,GADrB,OACbF,EADa,OAEnByB,EAAkBzB,GAFC,2CAAH,oDAMhBU,KAED,CAACN,EAAaF,EAAiBuB,IAE3BD,GAGIG,EAA0B,SAACC,GAAa,IAAD,EACJ9B,mBAAS,GADL,mBAC3C+B,EAD2C,KAC1BC,EAD0B,KAE5C5B,EAAkBC,cAChBC,EAAgBC,cAAhBD,YAaR,OAXAE,qBAAU,WAMJJ,GALc,uCAAG,4BAAAK,EAAA,sEACWwB,YAAwB7B,EAAiB0B,GADpD,OACbI,EADa,OAEnBF,EAAmBE,GAFA,2CAAH,oDAMhBtB,KAED,CAACR,EAAiB0B,EAASxB,IAEvByB,GAGMI,IArGI,WAA2B,IAA1BC,EAAyB,uDAAT,KAAS,EACbpC,mBAAS,IADI,mBACpCqC,EADoC,KAC3BC,EAD2B,OAEvBnB,cAAZD,EAFmC,EAEnCA,QACFE,EAAkBC,cAClBjB,EAAkBC,cAJmB,EAKnBE,cAAhBD,EALmC,EAKnCA,YAaR,OAXAE,qBAAU,WAMJU,GAAWd,GAAmBgB,GALhB,uCAAG,4BAAAX,EAAA,sEACD8B,YAAWnC,EAAiBgB,EAAiBF,EAASkB,GADrD,OACbzB,EADa,OAEnB2B,EAAW3B,GAFQ,2CAAH,oDAMhBC,KAED,CAACM,EAASd,EAAiBgB,EAAiBd,EAAa8B,IAErDC,I,oGCFMG,IAnBe,WAAO,IAAD,EACYxC,oBAAS,GADrB,mBAC3ByC,EAD2B,KACVC,EADU,KAE1BxB,EAAYC,cAAZD,QACFd,EAAkBC,cAaxB,OAXAG,qBAAU,WACJU,GAAWd,GACW,uCAAG,4BAAAK,EAAA,sEACLkC,YAAiBvC,GADZ,OACnBwC,EADmB,OAEzBF,EAAmBE,GAFM,2CAAH,oDAKxBC,KAED,CAAC3B,EAASd,IAENqC,I,mNCGIK,EAAiB,WAAO,IAC3BC,EAAgBxC,cAAhBwC,YAD0B,EAEI/C,qBAFJ,mBAE3BgD,EAF2B,KAEdC,EAFc,KAclC,OAVAzC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,6DACQyC,EAAeC,YAAYC,EAASC,eAD5C,SAEuBH,EAAaI,QAAQN,cAAcO,OAF1D,OAEQC,EAFR,OAGEP,EAAe,IAAIhD,IAAUuD,IAH/B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACV,IAEGC,GAGIU,EAAmB,SAACC,GAA0B,IAAD,EAC1B3D,mBAAS,IAAIC,IAAU,IADG,mBACjD2D,EADiD,KACxCC,EADwC,OAEe1C,cAA/DD,EAFgD,EAEhDA,QAAS4C,EAFuC,EAEvCA,SACTf,EAAgBxC,cAAhBwC,YAaR,OAXAvC,qBAAU,WAMJU,GAAW4C,GALG,uCAAG,4BAAArD,EAAA,sEACDsD,YAAgBD,EAAUH,EAAc,8CADvC,OACbhD,EADa,OAEnBkD,EAAW,IAAI5D,IAAUU,IAFN,2CAAH,oDAMhBC,KAED,CAACM,EAAS4C,EAAUH,EAAcZ,IAE9Ba,GAGMI,IAvDS,SAACL,GAA0B,IAAD,EAClB3D,mBAAS,IAAIC,IAAU,IADL,mBACzC2D,EADyC,KAChCC,EADgC,OAEuB1C,cAA/DD,EAFwC,EAExCA,QAAS4C,EAF+B,EAE/BA,SACTxD,EAAgBC,cAAhBD,YAaR,OAXAE,qBAAU,WAMJU,GAAW4C,GALG,uCAAG,4BAAArD,EAAA,sEACDsD,YAAgBD,EAAUH,EAAczC,GADvC,OACbP,EADa,OAEnBkD,EAAW,IAAI5D,IAAUU,IAFN,2CAAH,oDAMhBC,KAED,CAACM,EAAS4C,EAAUH,EAAcrD,IAE9BsD,I,4LCpBIT,EAAc,SAACc,EAAwBC,GAGlD,OADiB,IADJ,IAAIC,IAAKF,GACIG,IAAIC,UAAUC,EAA8BJ,IAI3DK,EAAY,uCAAG,WAC1BC,EACAC,EACAvD,GAH0B,eAAAT,EAAA,+EAMQ+D,EAAWlB,QAAQoB,UAAUxD,EAASuD,EAAmBE,QAAQT,SAASX,OANlF,cAMlBmB,EANkB,yBAOjBA,GAPiB,yDASjB,KATiB,yDAAH,0DAaZX,EAAe,uCAAG,WAC7BE,EACAN,EACAiB,GAH6B,iBAAAnE,EAAA,6DAKvBoE,EAAW1B,EAAYc,EAAUN,GALV,kBAOGkB,EAASvB,QAAQwB,UAAUF,GAAarB,OAP3C,cAOrBK,EAPqB,yBAQpBA,GARoB,yDAUpB,KAVoB,yDAAH,2D,8dCffmB,EAAS,uCAAG,WAAOC,EAAKC,GAAZ,+BAAAxE,EAAA,yDACjByE,EAAOC,cACPC,EAAQ,IAAIF,EAAKd,IAAIC,SAASgB,EAAcC,eAC5CC,EAAM,IAAIC,IAAUR,GACtBrE,EAAM,KACNsE,EAAMQ,OAAS,KALI,iBAMjBC,EAAI,EANa,IAAAjF,EAAA,wCAAAA,EAAA,6DAQbkF,EAAWV,EAAMW,MAAU,IAAJF,EAAS,KAAOA,EAAI,IAC3CG,EAAWF,EAASG,KAAI,SAACvC,GAAD,MAAU,CAACA,EAAK,GAAGwC,cAAeR,EAAIS,mBAAmBzC,EAAK,GAAIA,EAAK,QATlF,SAUU6B,EAAM9B,QAAQ2C,UAAUJ,GAAUtC,OAV5C,gBAUX2C,EAVW,EAUXA,WACRR,IACA/E,EAAMA,EAAIwF,OAAOD,EAAWJ,KAAI,SAACvC,EAAM6C,GAAP,OAAiBb,EAAIc,qBAAqBV,EAASS,GAAO,GAAI7C,OAZ3E,sDAOdmC,EAAIT,EAAMQ,OAAS,KAPL,iHAefI,EAAWZ,EAAMa,KAAI,SAACvC,GAAD,MAAU,CAACA,EAAK,GAAGwC,cAAeR,EAAIS,mBAAmBzC,EAAK,GAAIA,EAAK,QAf7E,UAgBQ6B,EAAM9B,QAAQ2C,UAAUJ,GAAUtC,OAhB1C,iBAgBb2C,EAhBa,EAgBbA,WACRvF,EAAMuF,EAAWJ,KAAI,SAACvC,EAAMmC,GAAP,OAAaH,EAAIc,qBAAqBpB,EAAMS,GAAG,GAAInC,MAjBnD,iCAmBhB5C,GAnBgB,4CAAH,wDAsBT2F,EAAQ,uCAAG,WAAOlG,EAAiBmG,EAAOC,EAAatF,GAA5C,SAAAT,EAAA,wFAEbL,EAAgBkD,QACpBgD,SAAS,IAAIrG,IAAUsG,GAAOE,MAAM,IAAIxG,IAAU,IAAIyG,IAAI,KAAKC,WAAYH,GAC3EI,KAAK,CAAEC,KAAM3F,IACb4F,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBANM,yDASbC,QAAQC,MAAR,OATa,wDAAH,4DAaR3E,EAAU,uCAAG,WAAOnC,EAAiBgB,EAAiBF,EAASiG,GAAlD,iCAAA1G,EAAA,8DACN0G,EADM,qCACqB/G,EAAgBkD,QAAQ8D,aAAa7D,OAD1D,iCAClB8D,EADkB,cAEHC,EAAiBlG,EAAiBF,GAF/B,cAElBuE,EAFkB,OAKlB8B,EAASC,MAAMC,MAAM,KAAM,CAAEhC,WAAUK,KAAI,SAACrF,EAAGiF,GAAJ,MAAU,CACzDtE,EAAgBuD,QAAQT,QACxB,sBACA,CAAChD,EAASwE,OARY,UAUNX,EAAU2C,EAAWH,GAVf,eAUlB5G,EAVkB,OAYlBgH,EAAWhH,EAAImF,KAAI,SAAC8B,GAAD,OAAQA,EAAGjB,cAE9BkB,EAASF,EAAS7B,KAAI,SAAC8B,GAAD,MAAQ,CAACxG,EAAgBuD,QAAQT,QAAS,uBAAwB,CAAC0D,OAdvE,UAeG7C,EAAU2C,EAAWG,GAfxB,eAelBC,EAfkB,OAiBlBC,EAAgB,GACtBD,EAAaE,QAAb,uCAAqB,WAAOC,EAAavC,GAApB,SAAAjF,EAAA,sDACfwH,EAAYtB,aAAeU,GAC7BU,EAAcG,KAAKP,EAASjC,IAFX,2CAArB,yDAKMyC,EAASJ,EAAcjC,KAAI,SAAC8B,GAAD,MAAQ,CAACxG,EAAgBuD,QAAQT,QAAS,oBAAqB,CAAC0D,OAvBzE,UAwBF7C,EAAU2C,EAAWS,GAxBnB,eAwBlB9F,EAxBkB,iBA0BlBM,EAAiBvC,GA1BC,iCA2BjBiC,GA3BiB,4CAAH,4DA8BViF,EAAgB,uCAAG,WAAOlG,EAAiBF,GAAxB,SAAAT,EAAA,+EACvBW,EAAgBkC,QAAQwB,UAAU5D,GAASqC,QADpB,2CAAH,wDAIhB6E,EAAU,uCAAG,WAAOhI,EAAiBgB,EAAiBF,GAAzC,iCAAAT,EAAA,sEAClBL,EAAgBkD,QAAQ8D,aAAa7D,OADnB,uBAEH+D,EAAiBlG,EAAiBF,GAF/B,cAElBuE,EAFkB,OAIlB8B,EAASC,MAAMC,MAAM,KAAM,CAAEhC,WAAUK,KAAI,SAACrF,EAAGiF,GAAJ,MAAU,CACzDtE,EAAgBuD,QAAQT,QACxB,sBACA,CAAChD,EAASwE,OAPY,SASNX,EAAU2C,EAAWH,GATf,cASlB5G,EATkB,OAUlBgH,EAAWhH,EAAImF,KAAI,SAAC8B,GAAD,OAAQA,EAAGjB,cAE9BkB,EAASF,EAAS7B,KAAI,SAAC8B,GAAD,MAAQ,CAACxG,EAAgBuD,QAAQT,QAAS,iBAAkB,CAAC0D,OAZjE,UAaI7C,EAAU2C,EAAWG,GAbzB,eAalBQ,EAbkB,OAelBC,EAAeX,EAASY,QAAO,SAACX,EAAIxB,GAAL,OAAgBiC,EAAcjC,GAAO,MAEpE+B,EAASG,EAAaxC,KAAI,SAAC8B,GAAD,MAAQ,CAACxH,EAAgBuE,QAAQT,QAAS,gBAAiB,CAAC0D,OAjBpE,UAkBF7C,EAAUyD,EAAYL,GAlBpB,eAkBlBjI,EAlBkB,OAoBpBuI,EAAiB,GACrBvI,EAAQ8H,SAAQ,SAACU,EAAGhD,GACdgD,EAAI,GACND,EAAeP,KAAKI,EAAa5C,OAIjC+C,EAAehD,OAAS,MAC1BgD,EAAiBA,EAAe7C,MAAM,EAAG,MA5BnB,4BAgCfxF,EAAgBkD,QACpB8E,WAAWK,GACX7B,KAAK,CAAEC,KAAM3F,IACb4F,GAAG,mBAAmB,SAACC,GACtB,OAAOA,EAAGC,oBApCQ,4DAuCfC,QAAQC,MAAR,OAvCe,2DAAH,0DA2CV3F,EAAa,uCAAG,WAAOnB,EAAiBgB,EAAiBF,GAAzC,yCAAAT,EAAA,+EAEDL,EAAgBkD,QAAQ8D,aAAa7D,OAFpC,cAEnB8D,EAFmB,gBAGJC,EAAiBlG,EAAiBF,GAH9B,cAGnBuE,EAHmB,OAKnB8B,EAASC,MAAMC,MAAM,KAAM,CAAEhC,WAAUK,KAAI,SAACrF,EAAGiF,GAAJ,MAAU,CACzDtE,EAAgBuD,QAAQT,QACxB,sBACA,CAAChD,EAASwE,OARa,UAUPX,EAAU2C,EAAWH,GAVd,eAUnB5G,EAVmB,OAWnBgH,EAAWhH,EAAImF,KAAI,SAAC8B,GAAD,OAAQA,EAAGjB,cAC9BkB,EAASF,EAAS7B,KAAI,SAAC8B,GAAD,MAAQ,CAACxG,EAAgBuD,QAAQT,QAAS,uBAAwB,CAAC0D,OAZtE,UAaE7C,EAAU2C,EAAWG,GAbvB,eAanBC,EAbmB,OAcnBK,EAASR,EAAS7B,KAAI,SAAC8B,GAAD,MAAQ,CAACxG,EAAgBuD,QAAQT,QAAS,iBAAkB,CAAC0D,OAdhE,UAeG7C,EAAU2C,EAAWS,GAfxB,eAenBE,EAfmB,iBAiBJ1F,EAAiBvC,GAjBb,eAiBnBuI,EAjBmB,OAmBnBZ,EAAgB,GACtBD,EAAaE,QAAb,uCAAqB,WAAOC,EAAavC,GAApB,SAAAjF,EAAA,uDAEdkI,GAAUV,EAAYtB,aAAeU,KAC9BgB,EAAc3C,GAAG,IAC3BqC,EAAcG,KAAKP,EAASjC,KAJX,2CAArB,yDAQMkD,EAASb,EAAcjC,KAAI,SAAC8B,GAAD,MAAQ,CAACxH,EAAgBuE,QAAQT,QAAS,gBAAiB,CAAC0D,OA5BpE,UA8BH7C,EAAUyD,EAAYI,GA9BnB,eA8BnB1I,EA9BmB,OA+BnBsB,EAAQtB,EAAQ2I,QAAO,SAACC,EAAGC,GAAJ,OAAU9I,IAAU+I,IAAIF,EAAGC,KAAI9I,IAAU,IA/B7C,kBAiClBuB,GAjCkB,kCAmCzByF,QAAQC,MAAR,MAnCyB,iCAqCpBjH,IAAU,IArCU,0DAAH,0DAwCbS,EAAe,uCAAG,WAAON,GAAP,eAAAK,EAAA,sEACLL,EAAgBkD,QAAQ8D,aAAa7D,OADhC,cACvB8D,EADuB,yBAEtBjH,EAAgBkD,QAAQ5C,gBAAgB2G,GAAW9D,QAF7B,2CAAH,sDAKf0F,EAAM,uCAAG,WAAO7I,GAAP,SAAAK,EAAA,+EACbL,EAAgBkD,QAAQ4F,YAAY3F,QADvB,2CAAH,sDAIN4F,EAAoB,uCAAG,WAAO/I,GAAP,eAAAK,EAAA,sEACTL,EAAgBkD,QAAQ8D,aAAa7D,OAD5B,cAC5B6D,EAD4B,yBAE3BA,GAF2B,2CAAH,sDAKpBzE,EAAgB,uCAAG,WAAOvC,GAAP,SAAAK,EAAA,+EACvBL,EAAgBkD,QAAQqF,SAASpF,QADV,2CAAH,sDAIhBtB,EAAuB,uCAAG,WAAO7B,EAAiBgJ,GAAxB,iBAAA3I,EAAA,sEACfL,EAAgBkD,QAAQ8D,aAAa7D,OADtB,cACjC8D,EADiC,gBAEhBjH,EAAgBkD,QAAQqF,SAASpF,OAFjB,uBAInC8D,GAAa,GAJsB,mBAOdjH,EAAgBkD,QAAQ+F,cAAchC,EAAW,EAAG+B,GAAa7F,OAPnD,eAO7B+F,EAP6B,yBAQ5BA,EAAS,KAAOC,KARY,kCAUnCtC,QAAQC,MAAR,KAAmBkC,GAVgB,iCAY9B,GAZ8B,0DAAH,wDAevBxH,EAAiB,uCAAG,WAAOxB,GAAP,uBAAAK,EAAA,sEACPL,EAAgBkD,QAAQ8D,aAAa7D,OAD9B,cACzB8D,EADyB,OAEzBvF,EAAU,GAFe,SAGV1B,EAAgBkD,QAAQqF,SAASpF,OAHvB,WAGzBoF,EAHyB,SAKY,IAA5Ba,SAASnC,EAAW,IALJ,yCAMtB,CAAC,EAAG,EAAG,EAAG,IANY,UAQ1BsB,EAR0B,iBASpBjD,EAAI,EATgB,aASbA,EAAI,GATS,6BAU3B5D,EAV2B,UAUN1B,EAAgBkD,QAAQmG,eAAepC,EAAY,EAAG3B,GAAGnC,OAVnD,qBAU2DoD,WAV3D,KAUnBuB,KAVmB,wBASNxC,IATM,gDAapBA,EAAI,EAbgB,aAabA,EAAI,GAbS,6BAc3B5D,EAd2B,UAcN1B,EAAgBkD,QAAQoG,eAAehE,GAAGnC,OAdpC,qBAc4CoD,WAd5C,KAcnBuB,KAdmB,wBAaNxC,IAbM,iDAiBxB5D,GAjBwB,4CAAH,uD,0MC9LjB6H,EAAuB,WAAO,IACjCzI,EAAYC,cAAZD,QACFd,EAAkBC,cAClBuJ,EAAwBvI,cAW9B,MAAO,CAAEwI,aATWvI,sBAAW,sBAAC,4BAAAb,EAAA,+EAEP2H,YAAWhI,EAAiBwJ,EAAuB1I,GAF5C,cAEtB4I,EAFsB,yBAGrBA,GAHqB,0DAKrB,GALqB,yDAO7B,CAAC5I,EAASd,EAAiBwJ,MAKnBG,EAAqB,WAAO,IAC/B7I,EAAYC,cAAZD,QACFd,EAAkBC,cAcxB,MAAO,CAAE2J,WAZS1I,sBAAW,uCAC3B,WAAOgI,EAAgBxH,GAAvB,eAAArB,EAAA,+EAEyB6F,YAASlG,EAAiBkJ,EAAQxH,EAASZ,GAFpE,cAEU4I,EAFV,yBAGWA,GAHX,0DAKW,GALX,yDAD2B,wDAS3B,CAAC5I,EAASd,MAMD6J,EAAe,WAAO,IAAD,EACVjK,mBAAS,GADC,mBACzBkK,EADyB,KACpBC,EADoB,KAE1B/J,EAAkBC,cAElB+J,EAAW9I,sBAAW,sBAAC,4BAAAb,EAAA,sEACHwI,YAAO7I,GADJ,OACrB8I,EADqB,OAE3BiB,EAAOjB,GAFoB,2CAG1B,CAAC9I,IAQJ,OANAI,qBAAU,WACJJ,GACFgK,MAED,CAAChK,EAAiBgK,IAEdF,I,uJChDIG,EAAsB,WAAO,IAAD,EACLrK,mBAAS,IAAIC,IAAU,IADlB,mBAChCyE,EADgC,KACrB4F,EADqB,KAE/BpJ,EAAiCC,cAAjCD,QACFd,EAAkBC,cAClB6C,EAAeqH,cAerB,OAbA/J,qBAAU,WACR,IAAMgK,EAAc,uCAAG,4BAAA/J,EAAA,sEACH8D,YAAarB,EAAc9C,EAAiBc,GADzC,OACfP,EADe,OAErB2J,EAAa,IAAIrK,IAAUU,IAFN,2CAAH,qDAKhBO,GAAWgC,GAAgBA,GAC7BsH,IAEF,IAAMC,EAAkBC,YAAYF,EAAgB,KACpD,OAAO,kBAAMG,cAAcF,MAC1B,CAACvJ,EAASgC,EAAc9C,IAEpBsE,I,sHCxBIkG,EAAc,SAACC,GAAkC,IAAD,EACT7K,oBAAS,GADA,mBACpD8K,EADoD,KACjCC,EADiC,KAEnDC,EAAcC,cAAdD,UAgBR,MAAO,CAAEE,cAda5J,sBAAW,sBAAC,sBAAAb,EAAA,sEAE9BsK,GAAqB,GAFS,SAGTC,IAHS,eAM5BD,GAAqB,GAEvBF,IAR8B,gDAU9B5D,QAAQC,MAAR,MAV8B,yDAY/B,CAAC8D,EAAWH,IAESC,uB,4FCWpBK,EAAcC,IAAOC,IAAV,2GAIN,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,WAG1BC,IAjC4C,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACtDC,EAAkBC,cAExB,OACE,eAAC,IAAD,CAAOC,MAAOF,EAAgB,IAAK,WAAYD,UAAWA,EAA1D,UACE,eAACR,EAAD,WACGS,EAAgB,IAAK,uCACtB,uBACCA,EAAgB,IAAK,8EACtB,uBACCA,EAAgB,IAAK,mFACtB,uBACCA,EACC,IACA,sHAGJ,cAAC,IAAD,UACE,cAAC,IAAD,CAAQG,WAAS,EAACC,QAASL,EAA3B,SACGC,EAAgB,IAAK,yB,iJCc1BK,EAAmBb,IAAOC,IAAV,0BAEhBa,EAAed,IAAOC,IAAV,6CACP,SAACC,GAAD,OAAWA,EAAMC,MAAMY,QAAQ,MAGpCC,EAA8BhB,IAAOC,IAAV,sEAK3BgB,EAAgBjB,IAAOC,IAAV,6KAER,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,WAQnCa,EAAoBlB,IAAOmB,KAAV,gEACZ,SAACjB,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,WAI1Be,EApDgC,SAAC,GAAoE,IAAlEtC,EAAiE,EAAjEA,IAAKuC,EAA4D,EAA5DA,OAAQC,EAAoD,EAApDA,gBAAiBC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MAC/FjB,EAAkBC,cAExB,OACE,eAACI,EAAD,WACE,cAACa,EAAA,EAAD,CACEC,aACE,eAACX,EAAD,WACE,cAACE,EAAD,UAAoBG,IACpB,cAACP,EAAD,IACA,8BACE,cAAC,IAAD,CAAQc,KAAK,KAAKhB,QAASY,EAA3B,SACGhB,EAAgB,IAAK,cAK9Be,SAAUA,EACVM,YAAY,IACZJ,MAAOA,IAET,cAACR,EAAD,UAAgBT,EAAgB,IAAD,UAAS1B,EAAIgD,iBAAb,YAAiCR,EAAjC,qB,2BCqF/BS,GAFSC,IAnGuC,SAAC,GAAwB,IA+C1D9D,EA/CoCY,EAAqB,EAArBA,IAAKyB,EAAgB,EAAhBA,UAAgB,EACtD3L,mBAAS,KAD6C,mBACrEqN,EADqE,KAChEC,EADgE,OAE1CtN,oBAAS,GAFiC,mBAErEuN,EAFqE,KAE1DC,EAF0D,OAGhDxN,oBAAS,GAA5ByN,EAHmE,oBAItE7B,EAAkBC,cAClB6B,EAAcC,mBAAQ,WAC1B,OAAOC,YAAsB1D,KAC5B,CAACA,IAEE2D,EAAaF,mBAAQ,WACzB,OAAOnE,SAASoE,YAAsB1D,EAAImB,IAAI9B,MAAwB,MACrE,CAACW,IAIIF,EAAeD,cAAfC,WACFd,EAAYe,cACZ6D,EAAYxM,sBAAW,sBAAC,8BAAAb,EAAA,sEAE1BgN,GAAgB,GACVhI,EAAS+D,SAAS6D,GAGlBvL,EAAU0F,MAAMC,MAAM,KAAM,CAAEhC,WAAUK,KAAI,iBAAM,CACtDiI,KAAKC,MAAMD,KAAKE,SAAW/E,GAAa,EACxC6E,KAAKC,MAAMD,KAAKE,SAAW/E,GAAa,EACxC6E,KAAKC,MAAMD,KAAKE,SAAW/E,GAAa,EACxC6E,KAAKC,MAAMD,KAAKE,SAAW/E,GAAa,MAVhB,SAYLc,EAAWT,IAAqB5C,WAAY7E,GAZvC,eAexB2L,GAAgB,GAfQ,kDAkB1BxG,QAAQC,MAAR,MAlB0B,0DAoB3B,CAAC8C,EAAYyD,EAAiBvE,EAAWmE,IAEtCa,EAAkB5M,uBAAY,WAC9B6M,OAAON,GAAcO,IACvBd,EAAOc,IAA8BzH,YAErC2G,EAAOO,EAAWlH,cAEnB,CAACkH,IAKJ,OACE,eAAC,IAAD,CAAO/B,MAAOF,EAAgB,IAAK,kCAAmCD,UAAWA,EAAjF,UACE,cAAC,EAAD,CACEkB,MAAOQ,EACPT,YAAasB,EACbvB,SA1Ce,SAAC0B,GAAD,OAA0Cf,EAAOe,EAAEC,cAAczB,QA2ChF3C,IAAKwD,EACLjB,OAAO,SACPC,gBAAgB,WAElB,8BACE,cAACS,EAAD,UAAOvB,EAAgB,IAAD,qBAAoBrC,IAApB,WAAmD,CAAEgF,IAAKhF,UAElF,gCACE,cAACiF,EAAD,UACG5C,EACC,IACA,6FAGJ,cAAC6C,EAAD,UAAQ7C,EAAgB,IAAD,2BAvBVtC,EAuB6C+D,GAtBtD/D,EAASC,KAsBU,iBAEzB,eAACmF,EAAA,EAAD,WACE,cAAC,IAAD,CAAQ3C,WAAS,EAAC4C,QAAQ,YAAY3C,QAASL,EAA/C,SACGC,EAAgB,IAAK,YAExB,cAAC,IAAD,CACEhE,GAAG,uBACHmE,WAAS,EACT6C,SACErB,GACA/D,SAAS6D,GAAOc,OAAON,IACvBrE,SAAS6D,GAAOe,KAChB5E,SAAS6D,GAAO,EAElBrB,QAAO,sBAAE,sBAAAvL,EAAA,6DACP+M,GAAa,GADN,SAEDM,IAFC,OAGPN,GAAa,GACb7B,IAJO,2CATX,SAgBG4B,EAAY3B,EAAgB,IAAK,wBAA0BA,EAAgB,IAAK,oBAS9ER,IAAOC,IAAV,2GAIC,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,YAGnCgD,EAAQrD,IAAOC,IAAV,+HAKA,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,WAEnC+C,EAAWpD,IAAOC,IAAV","file":"static/js/1.290a9ab1.chunk.js","sourcesContent":["import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winngNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (account && lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getMeowthAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getMeowthAddress())\n      const supply = await cakeContract.methods.totalSupply().call();    \n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { LOTTERY_TICKET_PRICE } from 'config'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finanltokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finanltokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenids = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIdex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenids.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 4 -matchNumber).call()\n    return amount / 1e15 / LOTTERY_TICKET_PRICE\n  } catch (err) {\n    console.error(err, matchNumber)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import { useCallback, useState } from 'react'\nimport { useLotteryApprove } from './useApprove'\n\nexport const useApproval = (onPresentApprove: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useLotteryApprove()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport default useApproval\n","import React from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your MEOWTH will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button fullWidth onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  onSelectMax?: () => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"MEOWTH\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} MEOWTH`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your MEOWTH cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} MEOWTH`)}</Final>\n      </div>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          fullWidth\n          disabled={\n            pendingTx ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n"],"sourceRoot":""}