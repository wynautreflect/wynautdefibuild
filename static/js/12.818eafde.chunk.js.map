{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","div","pow","toNumber","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","getMeowthAddress","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","id","disabled","length","onClick","fullWidth","UnlockButton","CakeWinnings","claimAmount","useTotalClaim","LotteryJackpot","lotteryPrizeAmount","useTotalRewards","toLocaleString","maximumFractionDigits","StyledLotteryCard","lotteryHasDrawn","useGetLotteryHasDrawn","requesteClaim","setRequestedClaim","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","onPresentApprove","onMultiClaim","useMultiClaimLottery","useApproval","handleApprove","requestedApproval","max","tokenName","onPresentBuy","handleClaim","console","error","marginRight","variant","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","meowthSupply","StyledTotalValueLockedCard","RainbowLight","keyframes","TotalValueLockedCard","cakePrice","ethereum","usePriceCakeBusd","bnbPrice","usePriceBnbBusd","farmsLP","useFarms","pools","usePools","farmsList","farmsToDisplay","removed","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","BNB","poolsWithApy","pool","isBnbPool","poolCategory","PoolCategory","BINANCE","stakingTokenFarm","s","tokenSymbol","stakingTokenName","totalStaked","newTvl","accumulator","currentValue","tvlString","isNaN","Number","data","setData","fetch","response","json","responsedata","fetchData","useGetStats","total_value_locked_all","textAlign","Cards","mediaQueries","lg","BaseLayout","sm","CTACards","Home","Page","className","href","external","fontWeight","textTransform","FarmStakingCard","LotteryCard"],"mappings":"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","file":"static/js/12.818eafde.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMeowth',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingMeowth',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\ninterface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold fontSize={fontSize}>\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={earningsSum} />\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getMeowthAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getMeowthAddress())\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  // background-image: url('/images/meowth-head.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/meowth-head.svg\" alt=\"meowth logo\" width={128} height={128} />\r\n        <Block>\r\n          <CakeHarvestBalance />\r\n          <Label>{TranslateString(544, 'MEOWTH to Pick Up')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <CakeWalletBalance />\r\n          <Label>{TranslateString(546, 'MEOWTH in Wallet')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Picking Up MEOWTH')\r\n                : TranslateString(532, `Pick Up (${balancesWithValue.length} pools)`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport CardValue from './CardValue'\r\n\r\nconst CakeWinnings = () => {\r\n  const { claimAmount } = useTotalClaim()\r\n  return <CardValue value={getBalanceNumber(claimAmount)} />\r\n}\r\n\r\nexport default CakeWinnings\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalRewards } from 'hooks/useTickets'\r\n\r\nconst LotteryJackpot = () => {\r\n  const lotteryPrizeAmount = useTotalRewards()\r\n\r\n  return (\r\n    <Text bold fontSize=\"24px\">\r\n      {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\r\n        maximumFractionDigits: 2,\r\n      })}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default LotteryJackpot\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button} from '@pancakeswap-libs/uikit'\r\nimport { getMeowthAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\r\nimport { useTotalClaim } from 'hooks/useTickets'\r\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\r\nimport { useLotteryAllowance } from 'hooks/useAllowance'\r\nimport { useApproval } from 'hooks/useApproval'\r\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\r\nimport CakeWinnings from './CakeWinnings'\r\nimport LotteryJackpot from './LotteryJackpot'\r\nimport {useModal} from '../../../ui-kit/widgets/Modal'\r\n\r\nconst StyledLotteryCard = styled(Card)`\r\n  background-image: url('/images/ticket-bg-meowth.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: flex;\r\n  margin-top: 24px;\r\n  button {\r\n    flex: 1 0 50%;\r\n  }\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\r\n  const [requesteClaim, setRequestedClaim] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const allowance = useLotteryAllowance()\r\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\r\n  const { claimAmount } = useTotalClaim()\r\n  const { onMultiClaim } = useMultiClaimLottery()\r\n  const cakeBalance = useTokenBalance(getMeowthAddress())\r\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\r\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"MEOWTH\" />)\r\n\r\n  const handleClaim = useCallback(async () => {\r\n    try {\r\n      setRequestedClaim(true)\r\n      const txHash = await onMultiClaim()\r\n      // user rejected tx or didn't go thru\r\n      if (txHash) {\r\n        setRequestedClaim(false)\r\n      }\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onMultiClaim, setRequestedClaim])\r\n\r\n  const renderLotteryTicketButtonBuyOrApprove = () => {\r\n    if (!allowance.toNumber()) {\r\n      return (\r\n        <Button fullWidth disabled={requestedApproval} onClick={handleApprove}>\r\n          {TranslateString(494, 'Approve MEOWTH')}\r\n        </Button>\r\n      )\r\n    }\r\n    return (\r\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\r\n        {TranslateString(558, 'Buy Tickets')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  \r\n  return (\r\n    <StyledLotteryCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(550, 'Your Lottery Winnings')}\r\n        </Heading>\r\n        <CardImage src=\"/images/ticket-meowth.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <CakeWinnings />\r\n          <Label>{TranslateString(552, 'MEOWTH to Collect')}</Label>\r\n        </Block>\r\n        <Block>\r\n          <LotteryJackpot />\r\n          <Label>{TranslateString(554, 'Total jackpot this round')}</Label>\r\n        </Block>\r\n        <Actions>\r\n          <Button\r\n            id=\"dashboard-collect-winnings\"\r\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\r\n            onClick={handleClaim}\r\n            style={{ marginRight: '8px' }}\r\n          >\r\n            {TranslateString(556, 'Collect Winnings')}\r\n          </Button>\r\n          {getBalanceNumber(claimAmount) === 0 || requesteClaim ? renderLotteryTicketButtonBuyOrApprove() : null}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledLotteryCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getMeowthAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getMeowthAddress())\r\n  const meowthSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"36px\">\r\n          {TranslateString(534, 'Stats')}\r\n        </Heading>\r\n        <Heading size=\"md\" mb=\"8px\">\r\n          {TranslateString(534, 'Meowth')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total MEOWTH Supply')}</Text>\r\n          {meowthSupply && <CardValue fontSize=\"14px\" value={meowthSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total MEOWTH Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New MEOWTH/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React, { useCallback, useMemo } from 'react'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\nimport { useFarms, usePools, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CAKE_POOL_PID, CAKE_PER_BLOCK, BLOCKS_PER_YEAR } from 'config'\r\nimport { PoolCategory, QuoteToken } from 'config/constants/types'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/CardActionsContainer'\r\nimport FarmCard from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  width: 50%;\r\n  text-align: center;\r\n`\r\nconst CardImage = styled.img`\r\n  margin-top: 16px;\r\n`\r\n\r\n\r\n\r\nconst RainbowLight = keyframes` \r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n  background: linear-gradient(\r\n    45deg,\r\n    rgba(255, 0, 0, 1) 0%,\r\n    rgba(255, 154, 0, 1) 10%,\r\n    rgba(208, 222, 33, 1) 20%,\r\n    rgba(79, 220, 74, 1) 30%,\r\n    rgba(63, 218, 216, 1) 40%,\r\n    rgba(47, 201, 226, 1) 50%,\r\n    rgba(28, 127, 238, 1) 60%,\r\n    rgba(95, 21, 242, 1) 70%,\r\n    rgba(186, 12, 248, 1) 80%,\r\n    rgba(251, 7, 217, 1) 90%,\r\n    rgba(255, 0, 0, 1) 100%\r\n  );\r\n  background-size: 300% 300%;\r\n  animation: ${RainbowLight} 2s linear infinite;\r\n  border-radius: 16px;\r\n  filter: blur(8px);\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n  opacity: 0.5;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const farmsLP = useFarms()\r\n  const pools = usePools(account)\r\n\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => {\r\n        let totalValue: BigNumber = new BigNumber('0')\r\n\r\n        if (!farm.lpTotalInQuoteToken) {\r\n          totalValue = null\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n          totalValue = bnbPrice.times(farm.lpTotalInQuoteToken)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          totalValue = cakePrice.times(farm.lpTotalInQuoteToken)\r\n        } else {\r\n          totalValue = farm.lpTotalInQuoteToken\r\n        }\r\n\r\n        return totalValue\r\n      })\r\n    },\r\n    [farmsLP, bnbPrice, cakePrice],\r\n  )\r\n\r\n  const poolsWithApy = pools.map((pool) => {\r\n    const isBnbPool = pool.poolCategory === PoolCategory.BINANCE\r\n    const stakingTokenFarm = farmsLP.find((s) => s.tokenSymbol === pool.stakingTokenName)\r\n\r\n    // tmp mulitplier to support ETH farms\r\n    // Will be removed after the price api\r\n    const tempMultiplier = 1\r\n\r\n    // /!\\ Assume that the farm quote price is BNB\r\n    const stakingTokenPriceInBNB = isBnbPool\r\n      ? new BigNumber(1)\r\n      : new BigNumber(stakingTokenFarm?.tokenPriceVsQuote).times(tempMultiplier)\r\n\r\n    const totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked)).times(bnbPrice)\r\n\r\n    return totalStakingTokenInPool\r\n  })\r\n\r\n  const newTvl = [...farmsList(farmsLP, false), ...poolsWithApy].reduce((accumulator, currentValue) =>\r\n    (accumulator || new BigNumber(0)).plus(currentValue),\r\n  )\r\n  const tvlString = newTvl.isNaN() ? null : Number(newTvl).toLocaleString('en-US', { maximumFractionDigits: 0 })\r\n  const TranslateString = useI18n()\r\n  const data = useGetStats()\r\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <>\r\n      {/* <StyledCardAccent /> */}\r\n      <StyledTotalValueLockedCard>\r\n        <CardBody style={{ width: '100%', textAlign: 'center' }}>\r\n          <Heading size=\"lg\" mb=\"24px\">\r\n            {TranslateString(762, 'Total Value Locked (TVL)')}\r\n          </Heading>\r\n          {data && tvlString ? (\r\n            <>\r\n              <Heading size=\"xl\">{`$${tvlString}`}</Heading>\r\n              <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Pay Day Pool')}</Text>\r\n              <CardImage src=\"/images/thefuture.png\" alt=\"The wheels of evolution turn out another interesting creature. A nascent species, never before seen in the region!\" width={64} height={64} />\r\n            </>\r\n          ) : (\r\n            <>\r\n              \r\n           \r\n            </>\r\n          )}\r\n        </CardBody>\r\n      </StyledTotalValueLockedCard>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/*\r\n * Due to Cors the api was forked and a proxy was created\r\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\r\n */\r\nexport const baseUrl = 'https://wynaut-api-q57t3u5a4-wynautreflect.vercel.app/api/v1'\r\n\r\n/* eslint-disable camelcase */\r\n\r\nexport interface TradePair {\r\n  swap_pair_contract: string\r\n  base_symbol: string\r\n  quote_symbol: string\r\n  last_price: number\r\n  base_volume_24_h: number\r\n  quote_volume_24_h: number\r\n}\r\n\r\nexport interface ApiStatResponse {\r\n  update_at: string\r\n  '24h_total_volume': number\r\n  total_value_locked: number\r\n  total_value_locked_all: number\r\n  trade_pairs: {\r\n    [key: string]: TradePair\r\n  }\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<ApiStatResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch(`${baseUrl}/stat`)\r\n        const responsedata: ApiStatResponse = await response.json()\r\n\r\n        setData(responsedata)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout, Link } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 162px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/meowth-coins.svg'), url('/images/wynaut-coins.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 12;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 12;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 12;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n\r\n\r\n    <Page>    \r\n      \r\n      <div className=\"Hero\">\r\n        <img src=\"/images/wynaut.svg\" alt=\"Wynaut\" className=\"center\" />\r\n        <img src=\"/images/meowth.svg\" alt=\"Meowth\" className=\"center\" />\r\n        \r\n        \r\n      </div>\r\n\r\n      <div className=\"Hero\">\r\n        <Link\r\n                      href=\"https://wynautcommunity.medium.com/introducing-gen-2-pokemoon-1-b0d9f6568699\"\r\n                      color=\"primary\"\r\n                      external\r\n                      style={{ fontWeight: 'bold', textTransform: 'none', fontSize: '24px'}}\r\n                    >\r\n\r\n                    Gen2 is coming soon - we&apos;re fixing bugs and applying finishing touches.<br/>\r\n                    Normal APY on Wynaut and Meowth farms and pools will be resumed soon!<br/><br/>\r\n                    Click here to read more about Gen2!</ Link>\r\n      </div>\r\n\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <LotteryCard />\r\n        </Cards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n        <CTACards>\r\n          {/* <EarnAPYCard /> */}\r\n        </CTACards>\r\n        {/* <Cards>\r\n          <FarmStakingCard />\r\n          <LotteryCard />\r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPYCard />\r\n          <EarnAssetCard />\r\n          <WinCard />\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards> */}\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}